#!/bin/bash

CUR_DIR=$( dirname "$(readlink -f "$0")" )
TEMPLATES_DIR=$CUR_DIR/templates

# Flags parsing
while test $# -gt 0; do
    case "$1" in
    -h|--help)
        echo ""
        echo -e "Usage: for now, simply execute it"
        echo -e "\033[1mCSDealer\033[0m is a kind of \"config file wrapper\" that adds variables, Xresources colors, and other cool stuff to program config files, using templates."
        echo ""
        echo -e "Options:"
        echo -e "-h, --help                 show this message"
        echo ""
        echo ""
        echo -e "\033[1mFor now\033[0m, more information at: https://github.com/PadronToni/CSDealer"
        echo ""
        exit 0
    ;;
    esac
done


# Checks if template dir exist, if not, exit
if [ ! -d $TEMPLATES_DIR ]
then
    echo "Error: cannot find any \"templates\" directory"
    exit 0
fi

INDEX=$CUR_DIR/index.ini
# Colors array variable, here will be stored all base 16 colors, foreground and background
declare -a colors

# ==============
# FUNCTIONS
# ==============

# Extracts base 16 colors, foreground and background from Xresources and assing them to "colors" array
get_xres_colors ()  {
  local xres=$( xrdb -query )
  local sas=$( echo "$xres" | awk '/\*\.?color.*:/' | sort -t r -k2 -n | awk '{print $2}')
  sas+=$( echo  ""; echo "$xres" | awk '/\*\.?.*ground:/' | sort | awk '{print $2}' )

  for i in $sas; do
    colors+=($i)
  done
}

# Extracts font from Xresources and assign it to font variable
get_xres_font () {
  font=$(xrdb -query | awk ' /^\*\.?font:/ {print $2; exit}')
}

# Extracts CSDdir from the current file and if it finds `~` replaces it with home directory
get_csd_dir () {
  local home=$( echo $HOME | sed 's/\//\\\//g')
  awk '/CSDdir *= */ { print $3; exit }' "$1" | sed -e "s/~/$home/g"
}

get_vars () {
  sed -n '/\[variables\]/,/\[.*\]/{/\[.*\]/b;/^;.*/b;p}' | awk -F'=' '/=/ {print $1" "$2}' < /dev/stdin
}

apply_vars () {
  # Checks if variables exists
  if [ -n "$1" ]
  then
      # Creates sed's arguments
      local sed_args=$( echo "$1" | awk '{ print "-e s/@"$1"@/"$2"/g " }' )
      # Applies all variables to file content
      sed $sed_args < /dev/stdin
  else
      cat /dev/stdin
  fi
}

# Prints only content section of piped stream
content_sec () {
  sed -n '/\[content\]/,//{/\[content\]/b;p}' < /dev/stdin
}

# ==============

get_xres_colors
get_xres_font

# Gets global variables, if present
g_vars=$( cat $INDEX | get_vars )

# Go through every file in template directory
for i in $( find "$TEMPLATES_DIR" -type f ); do

    # Gets CDSdir, the diretcory where should be written the file
    csd_dir=$( get_csd_dir "$i" )

    # Checks if the current file is a template
    if [ -n "$csd_dir" ]
    then

        content=$( cat $i )

        # Replaces default color and font variables with values in current template
        content=$( echo "$content" | sed \
        -e '/CSDdir *= */d' \
        -e "s/@font@/$font/g" \
        -e "s/@fg@/${colors[17]}/g" \
        -e "s/@bg@/${colors[16]}/g" \
        -e "s/@color15@/${colors[15]}/g" \
        -e "s/@color14@/${colors[14]}/g" \
        -e "s/@color13@/${colors[13]}/g" \
        -e "s/@color12@/${colors[12]}/g" \
        -e "s/@color11@/${colors[11]}/g" \
        -e "s/@color10@/${colors[10]}/g" \
        -e "s/@color9@/${colors[9]}/g" \
        -e "s/@color8@/${colors[8]}/g" \
        -e "s/@color7@/${colors[7]}/g" \
        -e "s/@color6@/${colors[6]}/g" \
        -e "s/@color5@/${colors[5]}/g" \
        -e "s/@color4@/${colors[4]}/g" \
        -e "s/@color3@/${colors[3]}/g" \
        -e "s/@color2@/${colors[2]}/g" \
        -e "s/@color1@/${colors[1]}/g" \
        -e "s/@color0@/${colors[0]}/g" )

        # Applies global variables to content
        content=$( echo "$content" | apply_vars "$g_vars" )

        # Gets local variables, if present
        l_vars=$( echo "$content" | get_vars )

        # Applies local variables to content
        content=$( echo "$content" | apply_vars "$l_vars" )

        # Writes sanitised content in the specified directory
        echo "$content" | content_sec > $csd_dir
    fi
done
